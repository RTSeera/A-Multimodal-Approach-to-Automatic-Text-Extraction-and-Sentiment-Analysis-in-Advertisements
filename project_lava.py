# -*- coding: utf-8 -*-
"""Project_lava.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11EfTVGyIied9NfvetqCF33MK6PYauwT_
"""

!pip install -q -U transformers==4.37.2
!pip install -q bitsandbytes==0.41.3 accelerate==0.25.0

import torch
from transformers import BitsAndBytesConfig

quantization_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.float16
)

from transformers import pipeline

model_id = "llava-hf/llava-1.5-7b-hf"

pipe = pipeline("image-to-text", model=model_id, model_kwargs={"quantization_config": quantization_config})

# Set up the pipeline
quantization_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.float16
)
model_id = "llava-hf/llava-1.5-7b-hf"
pipe = pipeline("image-to-text", model=model_id, model_kwargs={"quantization_config": quantization_config})
max_new_tokens = 200
prompt = "USER: <image>\n what does the image say?\nASSISTANT:"

# Function to process a single image file
def process_image(image_path):
    try:
        image = Image.open(image_path)
        outputs = pipe(image, prompt=prompt, generate_kwargs={"max_new_tokens": 200})
        return outputs[0]["generated_text"]
    except Exception as e:
        print(f"Error processing image {image_path}: {e}")
        return None

# Replace this with the path to your dataset directory
dataset_directory = "/content/drive/MyDrive/test2"

import os

# Set the path to the directory
dataset_directory = "/content/drive/MyDrive/test2"

# Check if the directory exists
if os.path.exists(dataset_directory):
    # List all files and folders in the directory
    contents = os.listdir(dataset_directory)
    print("Contents of the directory:")
    for item in contents:
        print(item)
else:
    print("The directory does not exist.")

import os
from PIL import Image
from IPython.display import display

def image_loader(directory):
    """
    Generator function to load images one by one from a specified directory.

    Args:
    directory (str): The path to the directory containing the images.

    Yields:
    PIL.Image.Image: An image loaded into memory, ready for processing.
    """
    # List all files in the directory
    for filename in os.listdir(directory):
        # Check for JPEG files
        if filename.endswith('.jpg'):
            # Construct the full file path
            file_path = os.path.join(directory, filename)
            # Load the image
            image = Image.open(file_path)
            # Yield the image object
            yield image

# Usage example
dataset_directory = "/content/drive/MyDrive/test2"
for image in image_loader(dataset_directory):
    ref_image=image
    # Display the image in the notebook
    display(image)
    break  # Remove this to process all images; now it stops after the first one

from google.colab import drive
drive.mount('/content/drive')

ref_image



import os
from PIL import Image
from IPython.display import display
from ipywidgets import Dropdown, Button, Output

def image_loader(directory):
    """
    Generator function to load images one by one from a specified directory.

    Args:
    directory (str): The path to the directory containing the images.

    Returns:
    dict: A dictionary of filenames and PIL.Image.Image objects.
    """
    images = {}
    # List all files in the directory
    for filename in os.listdir(directory):
        # Check for JPEG files
        if filename.endswith('.jpg'):
            # Construct the full file path
            file_path = os.path.join(directory, filename)
            # Load the image
            image = Image.open(file_path)
            # Store in the dictionary
            images[filename] = image
    return images

# Usage example
dataset_directory = "/content/drive/MyDrive/test2"
images = image_loader(dataset_directory)

# Create a dropdown menu for image selection
dropdown = Dropdown(
    options=[(filename, filename) for filename in sorted(images.keys())],
    description='Select Image:',
    disabled=False,
)

# Display area for the selected image
output_area = Output()

# Button to display the image
button = Button(description="Display Image")

# Global variable to store the reference image
ref_image = None

# Function to update the output area with the selected image
def on_button_clicked(b):
    global ref_image
    ref_image = images[dropdown.value]
    with output_area:
        output_area.clear_output()
        display(ref_image)
        print(f"Selected image: {dropdown.value}")

button.on_click(on_button_clicked)

# Display the widget and output
display(dropdown, button, output_area)

ref_image

max_new_tokens = 200
prompt = "USER: <image>\n what is the image?\nASSISTANT:"

outputs = pipe(ref_image, prompt=prompt, generate_kwargs={"max_new_tokens": 200})

print(outputs[0]["generated_text"])